# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- dev_ops
# pr:
# - main

resources:
  - repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: "2dbaa9eb-8968-48e1-b597-4b38bdfb1c03"
  imageRepository: "notfightclubfights"
  containerRegistry: "p3fightclub.azurecr.io"
  dockerfilePath: "Dockerfile"
  tag: "$(Build.BuildId)"
  imagePullSecret: "p3fightclub2028b1d7-auth"

  # Agent VM image name
  vmImageName: "ubuntu-latest"

stages:
  - stage: Test
    displayName: Test stage
    jobs:
      - job: Test
        displayName: Test
        pool:
          vmImage: $(vmImageName)
        steps:
        - task: DotNetCoreCLI@2
          displayName: 'dotnet restore'
          inputs:
            command: 'restore'
            feedsToUse: 'select'
        - task: DotNetCoreCLI@2
          displayName: 'dotnet build'
          inputs:
            command: 'build'
        - task: DotNetCoreCLI@2
          displayName: 'dotnet test'
          inputs:
            command: 'test'
            arguments: '--collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura'
            publishTestResults: true
            projects: FightsApi_Test
        - task: PublishCodeCoverageResults@1
          displayName: 'Publish code coverage report'
          inputs:
            codeCoverageTool: 'Cobertura'
            summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'

  - stage: Build
    displayName: Build stage
    dependsOn: Test
    condition: succeededOrFailed()
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: Docker@2
            displayName: Build and push an image to container registry
            inputs:
              command: buildAndPush
              repository: $(imageRepository)
              dockerfile: $(dockerfilePath)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(tag)

          - upload: manifests
            artifact: manifests

  # - stage: Deploy
  #   displayName: Deploy stage
  #   dependsOn: Build

  #   jobs:
  #   - deployment: Deploy
  #     displayName: Deploy
  #     pool:
  #       vmImage: $(vmImageName)
  #     environment: 'NotFightClubnotfightclubfights.default'
  #     strategy:
  #       runOnce:
  #         deploy:
  #           steps:
  #           - task: KubernetesManifest@0
  #             displayName: Create imagePullSecret
  #             inputs:
  #               action: createSecret
  #               secretName: $(imagePullSecret)
  #               dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

  #           - task: KubernetesManifest@0
  #             displayName: Deploy to Kubernetes cluster
  #             inputs:
  #               action: deploy
  #               manifests: |
  #                 $(Pipeline.Workspace)/manifests/deployment.yml
  #                 $(Pipeline.Workspace)/manifests/service.yml
  #               imagePullSecrets: |
  #                 $(imagePullSecret)
  #               containers: |
  #                 $(containerRegistry)/$(imageRepository):$(tag)

